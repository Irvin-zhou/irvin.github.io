<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo.md</title>
    <link href="/2020/11/27/hexo-md/"/>
    <url>/2020/11/27/hexo-md/</url>
    
    <content type="html"><![CDATA[<p>搭建blog的记录</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre><code class="hljs axapta">brew install node <span class="hljs-comment">//安装node.js</span>node -v <span class="hljs-comment">//查看node版本</span>npm -v  <span class="hljs-comment">//检查npm是否安装成功</span>sudo npm install -g hexo-cli<span class="hljs-comment">//使用npm安装hexo</span>cd ~/Desktop &amp;&amp; mkdir blog &amp;&amp; cd blog<span class="hljs-comment">//创建blog文件夹</span>hexo init<span class="hljs-comment">//初始化blog文件夹</span>hexo s<span class="hljs-comment">//预览blog命令</span>hexo g<span class="hljs-comment">//生成我们想要的博客文件</span>hexo d<span class="hljs-comment">//将本地的博客文件push到github</span>hexo <span class="hljs-keyword">new</span> firstPage.md <span class="hljs-comment">//创建blog文章</span>hexo n <span class="hljs-string">&quot;博客名称&quot;</span>  =&gt; hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;博客名称&quot;</span>    <span class="hljs-comment">//#这两个都是创建新文章，前者是简写模式</span>hexo p  =&gt; hexo publishhexo g  =&gt; hexo generate  <span class="hljs-comment">//生成</span>hexo s  =&gt; hexo <span class="hljs-keyword">server</span>  <span class="hljs-comment">//启动服务预览</span>hexo d  =&gt; hexo deploy  <span class="hljs-comment">//部署  </span>hexo <span class="hljs-keyword">server</span>   <span class="hljs-comment">//Hexo 会监视文件变动并自动更新，无须重启服务器。</span>hexo <span class="hljs-keyword">server</span> -s   <span class="hljs-comment">//静态模式</span>hexo <span class="hljs-keyword">server</span> -p <span class="hljs-number">5000</span>   <span class="hljs-comment">//更改端口</span>hexo <span class="hljs-keyword">server</span> -i <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>   <span class="hljs-comment">//自定义IP</span>hexo clean   <span class="hljs-comment">//清除缓存，网页正常情况下可以忽略此条命令</span>pm2 start hexo_run.js<span class="hljs-comment">//后台启动blog脚本命令</span>pm2 stop hexo_run.js<span class="hljs-comment">//后台关闭blog脚本命令</span></code></pre><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><ol><li><p>配置好git之后访问404？</p><p>域名必须和gitHub上的名称相同，否则会出现访问404的问题</p></li></ol><p>搭建blog参考：<a href="https://blog.csdn.net/nsurl/article/details/108848671">https://blog.csdn.net/nsurl/article/details/108848671</a></p><p>blog主题网站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ThreadLocal</title>
    <link href="/2020/11/25/ThreadLocal-md/"/>
    <url>/2020/11/25/ThreadLocal-md/</url>
    
    <content type="html"><![CDATA[<p>记录ThreadLocal理解和使用</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><h3 id="ThreadLocal定义："><a href="#ThreadLocal定义：" class="headerlink" title="ThreadLocal定义："></a>ThreadLocal定义：</h3><blockquote><p>threadLocal是一个线程内部的存储类，可以在指定线程内存储数据，数据存储以后只有指定的线程可以得到数据。</p></blockquote><h3 id="ThreadLocal官方解释："><a href="#ThreadLocal官方解释：" class="headerlink" title="ThreadLocal官方解释："></a>ThreadLocal官方解释：</h3><pre><code class="hljs applescript">/** * This <span class="hljs-built_in">class</span> provides thread-<span class="hljs-keyword">local</span> variables.  These variables differ <span class="hljs-keyword">from</span> * their normal counterparts <span class="hljs-keyword">in</span> <span class="hljs-keyword">that</span> each thread <span class="hljs-keyword">that</span> accesses one (via <span class="hljs-keyword">its</span> * &#123;@code <span class="hljs-keyword">get</span>&#125; <span class="hljs-keyword">or</span> &#123;@code <span class="hljs-keyword">set</span>&#125; method) has <span class="hljs-keyword">its</span> own, independently initialized * <span class="hljs-keyword">copy</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> variable.  &#123;@code ThreadLocal&#125; instances are typically private * static fields <span class="hljs-keyword">in</span> classes <span class="hljs-keyword">that</span> wish <span class="hljs-keyword">to</span> associate state <span class="hljs-keyword">with</span> a thread (e.g., * a user ID <span class="hljs-keyword">or</span> Transaction ID). */</code></pre><p>大致意思是threadLocal提供了线程内存储变量的能力，并且为每个使用该变量的线程提供独立的变量副本，通过get&amp;set方法就可以获取当前线程的值。</p><p>ThreadLocal的静态内部类ThreadLocalMap为每个Thread都维护了一个数组table，ThreadLocal确定了一个数组的下标，而这个下标就是Value存储的对应位置。</p><h3 id="ThreadLocal使用："><a href="#ThreadLocal使用：" class="headerlink" title="ThreadLocal使用："></a>ThreadLocal使用：</h3><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;T&gt; sThreadLocal = <span class="hljs-keyword">new</span> ThreadLocal&lt;T&gt;();sThreadLocal.set()sThreadLocal.get()</code></pre><p>ThreadLocal.get()：</p><blockquote><p>1、获取当前正在执行线程的ThreadLocalMap对象threadLocals。</p><p>2、如果Map不为空的话，从Map中获取K-V Entry节点，之后从Entry获取Value值返回。</p><p>3、如果Map为空的话，在Map中添加一个Value为null的值去返回，避免造成空指针。</p></blockquote><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;        Thread t = Thread.currentThread();        ThreadLocalMap map = getMap(t);        <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>) &#123;            ThreadLocalMap.Entry e = map.getEntry(<span class="hljs-keyword">this</span>);            <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span>                T result = (T)e.value;                <span class="hljs-keyword">return</span> result;            &#125;        &#125;        <span class="hljs-keyword">return</span> setInitialValue();&#125;<span class="hljs-function">ThreadLocalMap <span class="hljs-title">getMap</span><span class="hljs-params">(Thread t)</span> </span>&#123;        <span class="hljs-keyword">return</span> t.threadLocals;&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> T <span class="hljs-title">setInitialValue</span><span class="hljs-params">()</span> </span>&#123;        T value = initialValue();        Thread t = Thread.currentThread();        ThreadLocalMap map = getMap(t);        <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>)            map.set(<span class="hljs-keyword">this</span>, value);        <span class="hljs-keyword">else</span>            createMap(t, value);        <span class="hljs-keyword">return</span> value;&#125;</code></pre><p>ThreadLocal.set()：</p><blockquote><p>1、从当前线程获取Map。</p><p>2、Map不为空时将ThreadLocal的对象和Value值存放在Map中。</p><p>3、Map为空时，对ThreadLocalMap进行初始化创建并存放到Map中。</p></blockquote><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T value)</span> </span>&#123;        Thread t = Thread.currentThread();        ThreadLocalMap map = getMap(t);        <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>)            map.set(<span class="hljs-keyword">this</span>, value);        <span class="hljs-keyword">else</span>            createMap(t, value);&#125;<span class="hljs-function">ThreadLocalMap <span class="hljs-title">getMap</span><span class="hljs-params">(Thread t)</span> </span>&#123;        <span class="hljs-keyword">return</span> t.threadLocals;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createMap</span><span class="hljs-params">(Thread t, T firstValue)</span> </span>&#123;        t.threadLocals = <span class="hljs-keyword">new</span> ThreadLocalMap(<span class="hljs-keyword">this</span>, firstValue);&#125;</code></pre><h3 id="ThreadLocal作用："><a href="#ThreadLocal作用：" class="headerlink" title="ThreadLocal作用："></a>ThreadLocal作用：</h3><ol><li>在进行对象跨层次传递的时候，使用ThreadLocal可以避免多次传递，打破层次之间的束缚。</li><li>线程之间的数据隔离</li><li>进行事务操作，用于存储线程事务信息</li><li>数据库连接，session会话管理</li></ol>]]></content>
    
    
    <categories>
      
      <category>ThreadLocal</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
